#!/bin/bash

# Step 1: Get the ClickHouse container ID
CONTAINER_ID=$(docker ps | grep clickhouse | awk '{print $1}')
if [ -z "$CONTAINER_ID" ]; then
  echo "ClickHouse container not found."
  exit 1
fi

# Step 2: Define the query to run inside ClickHouse
QUERY="SELECT
    f.SrcAddr AS source_address,
    f.DstAddr AS destination_address,
    f.SrcAS AS source_asn,
    a.name AS source_asn_name,
    COUNT(*) AS total_flows,
    SUM(f.Bytes) / 1048576 AS total_mb
FROM flows AS f
LEFT JOIN asns AS a ON f.SrcAS = a.asn
GROUP BY
    source_address,
    destination_address,
    source_asn,
    source_asn_name
ORDER BY total_mb DESC
LIMIT 100;"

# Step 3: Run the query inside the ClickHouse container and store the output in a temporary file
docker exec -i $CONTAINER_ID clickhouse-client --query="$QUERY" > query_output.csv

echo "Query executed and results saved to query_output.csv."

# Step 4: DNS lookup for source and destination addresses with IPv6 to IPv4 conversion
input_file="query_output.csv"
output_file="dns_enriched_output.csv"

# Add header to the output file
echo "source_address,source_asn,source_asn_name,destination_address,dns_name_src,dns_name_dst,total_flows,total_mb" > "$output_file"


# Function to convert IPv6-mapped IPv4 addresses to pure IPv4
convert_ipv6_to_ipv4() {
    local ip=$1
    # Check if the IP is an IPv4-mapped IPv6 address (starts with ::ffff:)
    if [[ "$ip" =~ ^::ffff: ]]; then
        # Extract the IPv4 portion from the IPv6 address (strip ::ffff:)
        echo "${ip##*::ffff:}"
    else
        # If not an IPv6-mapped address, return the original
        echo "$ip"
    fi
}

# Loop through the CSV and perform DNS lookups and IPv6 to IPv4 conversion
tail -n +2 "$input_file" | while IFS=',' read -r source_address destination_address source_asn source_asn_name total_flows total_mb; do
    # Convert IPv6-mapped IPv4 addresses to pure IPv4
    source_address_converted=$(convert_ipv6_to_ipv4 "$source_address")
    destination_address_converted=$(convert_ipv6_to_ipv4 "$destination_address")

    # Check if source_address_converted is not empty before nslookup
    if [ -n "$source_address_converted" ]; then
        dns_name_src=$(nslookup "$source_address_converted" | grep 'name = ' | awk '{print $4}' | sed 's/.$//')
        # If no DNS name is found, set to "No DNS name"
        if [ -z "$dns_name_src" ]; then
            dns_name_src="No DNS name"
        fi
    else
        dns_name_src="No DNS name"
    fi

    # Check if destination_address_converted is not empty before nslookup
    if [ -n "$destination_address_converted" ]; then
        dns_name_dst=$(nslookup "$destination_address_converted" | grep 'name = ' | awk '{print $4}' | sed 's/.$//')
        # If no DNS name is found, set to "No DNS name"
        if [ -z "$dns_name_dst" ]; then
            dns_name_dst="No DNS name"
        fi
    else
        dns_name_dst="No DNS name"
    fi

    # Append the result with DNS names to the output file
    echo "$source_address_converted,$source_asn,$source_asn_name,$destination_address_converted,$dns_name_src,$dns_name_dst,$total_flows,$total_mb" >> "$output_file"
done

echo "DNS lookup and IPv6 to IPv4 conversion completed and saved to $output_file."
